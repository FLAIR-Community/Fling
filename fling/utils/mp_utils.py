import multiprocessing

from fling.component.client import ClientTemplate


def _client_trainer(client: ClientTemplate, kwargs: dict) -> tuple:
    # This is the function that each client will execute train function.
    # It will receive a task and its arguments, execute it, and return its result and the updated client.
    res = client.train(**kwargs)
    return res, client


def _client_tester(client: ClientTemplate, kwargs: dict) -> tuple:
    # This is the function that each client will execute test function.
    # It will receive a task and its arguments, execute it, and return its result and the updated client.
    res = client.test(**kwargs)
    return res, client


def _client_finetuner(client: ClientTemplate, kwargs: dict) -> tuple:
    # This is the function that each client will execute finetune function.
    # It will receive a task and its arguments, execute it, and return its result and the updated client.
    res = client.finetune(**kwargs)
    return res, client


def copy_attributes(src: object, dst: object) -> None:
    r"""
    Overview:
        Copy all the attributes of src to dst.
        This function requires that src and dst is the same class.
    Arguments:
        src: The attributes of this object will be copied to dst.
        dst: The attributes of this object will be over-written by src's.
    """
    for attr in src.__dict__:
        setattr(dst, attr, getattr(src, attr))


class MultiProcessLauncher:
    r"""
    Overview:
        Accelerate the process of operations on each client.
        Use one process to monitor operations on individual clients.
    """

    def __init__(self, num_proc: int, task_name: str):
        r"""
        Overview:
            Initialization for launcher.
        Aruguments:
            num_proc: Number of processes used.
            task_name: Name of operation done in each clients. Supported tasks: train, test, finetune.
        """
        self.num_proc = num_proc
        self.task_name = task_name

    def launch(self, clients, **kwargs) -> list:
        r"""
        Overview:
            Launch the tasks in each client.
        Arguments:
            clients: Clients to be launched.
            kwargs: Arguments required by corresponding operations (e.g. train, test, finetune)
        Returns:
            loggers: A list, each elemenent corresponds to the logger generated by one client.
        """
        tasks = [(client, kwargs) for client in clients]
        with multiprocessing.Pool(self.num_proc) as pool:
            # Use starmap to apply the worker function to every task
            # Each task is a tuple that contains the task object and the arguments
            if self.task_name == 'train':
                results = pool.starmap(_client_trainer, tasks)
            elif self.task_name == 'test':
                results = pool.starmap(_client_tester, tasks)
            elif self.task_name == 'finetuner':
                results = pool.starmap(_client_finetuner, tasks)
            else:
                raise ValueError(f'Unrecognized task name: {self.task_name}')

        # Retrieve the loggers and updated clients respectively.
        loggers = [results[i][0] for i in range(len(results))]
        new_clients = [results[i][1] for i in range(len(results))]

        # Copy the attributes of new clients to original clients.
        for new_client in new_clients:
            for client in clients:
                if new_client.client_id == client.client_id:
                    copy_attributes(src=new_client, dst=client)
                    break

        return loggers
